--- a/ath/if_ath_pci.c
+++ b/ath/if_ath_pci.c
@@ -94,7 +94,7 @@ static char *dev_info = "ath_pci";
  * "new way" to do things, we may want to switch back to having
  * the HAL check them by defining a probe method.
  */
-static struct pci_device_id ath_pci_id_table[] __devinitdata = {
+static struct pci_device_id ath_pci_id_table[] = {
 	{ 0x168c, 0x0007, PCI_ANY_ID, PCI_ANY_ID },
 	{ 0x168c, 0x0012, PCI_ANY_ID, PCI_ANY_ID },
 	{ 0x168c, 0x0013, PCI_ANY_ID, PCI_ANY_ID },
--- a/ath/if_ath.c
+++ b/ath/if_ath.c
@@ -11615,228 +11615,190 @@ static int mincalibrate = 1;		/* once a 
 static int maxint = 0x7fffffff;		/* 32-bit big */
 
 static const ctl_table ath_sysctl_template[] = {
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "dev_vendor",
+	{ .procname	= "dev_vendor",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_hwinfo,
-	  .strategy   = &sysctl_string,
 	  .data		= "N/A",
 	  .maxlen   = 1,
 	  .extra2	= (void *)ATH_CARD_VENDOR,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "dev_name",
+	{ .procname	= "dev_name",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_hwinfo,
-	  .strategy   = &sysctl_string,
 	  .data		= "N/A",
 	  .maxlen   = 1,
 	  .extra2	= (void *)ATH_CARD_NAME,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "slottime",
+	{ .procname	= "slottime",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_SLOTTIME,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "acktimeout",
+	{ .procname	= "acktimeout",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_ACKTIMEOUT,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "ctstimeout",
+	{ .procname	= "ctstimeout",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_CTSTIMEOUT,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "distance",
+	{ .procname	= "distance",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_DISTANCE,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "silent",
+	{ .procname	= "silent",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_SILENT,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "softled",
+	{ .procname	= "softled",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_SOFTLED,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "ledpin",
+	{ .procname	= "ledpin",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_LEDPIN,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "countrycode",
+	{ .procname	= "countrycode",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_COUNTRYCODE,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "outdoor",
+	{ .procname	= "outdoor",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_OUTDOOR,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "regdomain",
+	{ .procname	= "regdomain",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_REGDOMAIN,
 	},
 #ifdef AR_DEBUG
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "debug",
+	{ .procname	= "debug",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_DEBUG,
 	},
 #endif
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "poweroffset",
+	{ .procname	= "poweroffset",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_POWEROFFSET,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "txantenna",
+	{ .procname	= "txantenna",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_TXANTENNA,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "rxantenna",
+	{ .procname	= "rxantenna",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_RXANTENNA,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "diversity",
+	{ .procname	= "diversity",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_DIVERSITY,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "txintrperiod",
+	{ .procname	= "txintrperiod",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_TXINTRPERIOD,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "fftxqmin",
+	{ .procname	= "fftxqmin",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_FFTXQMIN,
 	},
 #ifdef ATH_SUPERG_XR
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "xrpollperiod",
+	{ .procname	= "xrpollperiod",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_XR_POLL_PERIOD,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "xrpollcount",
+	{ .procname	= "xrpollcount",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_XR_POLL_COUNT,
 	},
 #endif
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "ackrate",
+	{ .procname	= "ackrate",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_ACKRATE,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "channelbw",
+	{ .procname	= "channelbw",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_CHANBW,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname     = "rp",
+	{ .procname     = "rp",
 	  .mode         = 0200,
 	  .proc_handler = ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_RP,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname     = "radar_print",
+	{ .procname     = "radar_print",
 	  .mode         = 0200,
 	  .proc_handler = ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_RP_PRINT,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname     = "radar_print_all",
+	{ .procname     = "radar_print_all",
 	  .mode         = 0200,
 	  .proc_handler = ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_RP_PRINT_ALL,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname     = "radar_dump",
+	{ .procname     = "radar_dump",
 	  .mode         = 0200,
 	  .proc_handler = ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_RP_PRINT_MEM,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname     = "radar_dump_all",
+	{ .procname     = "radar_dump_all",
 	  .mode         = 0200,
 	  .proc_handler = ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_RP_PRINT_MEM_ALL,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname     = "rp_flush",
+	{ .procname     = "rp_flush",
 	  .mode         = 0200,
 	  .proc_handler = ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_RP_FLUSH,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname     = "panic",
+	{ .procname     = "panic",
 	  .mode         = 0200,
 	  .proc_handler = ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_PANIC,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname     = "rp_ignored",
+	{ .procname     = "rp_ignored",
 	  .mode         = 0644,
 	  .proc_handler = ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_RP_IGNORED,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname     = "radar_ignored",
+	{ .procname     = "radar_ignored",
 	  .mode         = 0644,
 	  .proc_handler = ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_RADAR_IGNORED,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname     = "intmit",
+	{ .procname     = "intmit",
 	  .mode         = 0644,
 	  .proc_handler = ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_INTMIT,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname     = "noise_immunity",
+	{ .procname     = "noise_immunity",
 	  .mode         = 0644,
 	  .proc_handler = ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_NOISE_IMMUNITY,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname     = "ofdm_weak_det",
+	{ .procname     = "ofdm_weak_det",
 	  .mode         = 0644,
 	  .proc_handler = ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_OFDM_WEAK_DET,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname     = "cca_thresh",
+	{ .procname     = "cca_thresh",
 	  .mode         = 0644,
 	  .proc_handler = ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_CCA_THRESH,
@@ -11873,12 +11835,10 @@ ath_dynamic_sysctl_register(struct ath_s
 
 	/* setup the table */
 	memset(sc->sc_sysctls, 0, space);
-	sc->sc_sysctls[0].ctl_name = CTL_DEV;
 	sc->sc_sysctls[0].procname = "dev";
 	sc->sc_sysctls[0].mode = 0555;
 	sc->sc_sysctls[0].child = &sc->sc_sysctls[2];
 	/* [1] is NULL terminator */
-	sc->sc_sysctls[2].ctl_name = CTL_AUTO;
 	sc->sc_sysctls[2].procname = dev_name;
 	sc->sc_sysctls[2].mode = 0555;
 	sc->sc_sysctls[2].child = &sc->sc_sysctls[4];
@@ -12001,23 +11961,20 @@ ath_announce(struct net_device *dev)
  */
 static ctl_table ath_static_sysctls[] = {
 #ifdef AR_DEBUG
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "debug",
+	{ .procname	= "debug",
 	  .mode		= 0644,
 	  .data		= &ath_debug,
 	  .maxlen	= sizeof(ath_debug),
 	  .proc_handler	= proc_dointvec
 	},
 #endif
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "xchanmode",
+	{ .procname	= "xchanmode",
 	  .mode		= 0444,
 	  .data		= &ath_xchanmode,
 	  .maxlen	= sizeof(ath_xchanmode),
 	  .proc_handler	= proc_dointvec
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "calibrate",
+	{ .procname	= "calibrate",
 	  .mode		= 0644,
 	  .data		= &ath_calinterval,
 	  .maxlen	= sizeof(ath_calinterval),
@@ -12028,15 +11985,13 @@ static ctl_table ath_static_sysctls[] = 
 	{ 0 }
 };
 static ctl_table ath_ath_table[] = {
-	{ .ctl_name	= DEV_ATH,
-	  .procname	= "ath",
+	{ .procname	= "ath",
 	  .mode		= 0555,
 	  .child	= ath_static_sysctls
 	}, { 0 }
 };
 static ctl_table ath_root_table[] = {
-	{ .ctl_name	= CTL_DEV,
-	  .procname	= "dev",
+	{ .procname	= "dev",
 	  .mode		= 0555,
 	  .child	= ath_ath_table
 	}, { 0 }
--- a/net80211/ieee80211_linux.c
+++ b/net80211/ieee80211_linux.c
@@ -699,40 +699,33 @@ IEEE80211_SYSCTL_DECL(ieee80211_sysctl_m
 
 static const ctl_table ieee80211_sysctl_template[] = {
 #ifdef IEEE80211_DEBUG
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "debug",
+	{ .procname	= "debug",
 	  .mode		= 0644,
 	  .proc_handler	= ieee80211_sysctl_debug
 	},
 #endif
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "dev_type",
+	{ .procname	= "dev_type",
 	  .mode		= 0644,
 	  .proc_handler	= ieee80211_sysctl_dev_type
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "monitor_nods_only",
+	{ .procname	= "monitor_nods_only",
 	  .mode		= 0644,
 	  .proc_handler	= ieee80211_sysctl_monitor_nods_only
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "monitor_txf_len",
+	{ .procname	= "monitor_txf_len",
 	  .mode		= 0644,
 	  .proc_handler	= ieee80211_sysctl_monitor_txf_len
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "monitor_phy_errors",
+	{ .procname	= "monitor_phy_errors",
 	  .mode		= 0644,
 	  .proc_handler = ieee80211_sysctl_monitor_phy_errors
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "monitor_crc_errors",
+	{ .procname	= "monitor_crc_errors",
 	  .mode		= 0644,
 	  .proc_handler = ieee80211_sysctl_monitor_crc_errors
 	},
 	/* NB: must be last entry before NULL */
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "%parent",
+	{ .procname	= "%parent",
 	  .maxlen	= IFNAMSIZ,
 	  .mode		= 0444,
 	  .proc_handler	= proc_dostring
@@ -786,12 +779,10 @@ ieee80211_virtfs_latevattach(struct ieee
 
 	/* setup the table */
 	memset(vap->iv_sysctls, 0, space);
-	vap->iv_sysctls[0].ctl_name = CTL_NET;
 	vap->iv_sysctls[0].procname = "net";
 	vap->iv_sysctls[0].mode = 0555;
 	vap->iv_sysctls[0].child = &vap->iv_sysctls[2];
 	/* [1] is NULL terminator */
-	vap->iv_sysctls[2].ctl_name = CTL_AUTO;
 	vap->iv_sysctls[2].procname = devname; /* XXX bad idea? */
 	vap->iv_sysctls[2].mode = 0555;
 	vap->iv_sysctls[2].child = &vap->iv_sysctls[4];
--- a/ath_hal/ah_os.c
+++ b/ath_hal/ah_os.c
@@ -518,50 +518,43 @@ EXPORT_SYMBOL(ath_hal_memcmp);
 
 static ctl_table ath_hal_sysctls[] = {
 #ifdef AH_DEBUG
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "debug",
+	{ .procname	= "debug",
 	  .mode		= 0644,
 	  .data		= &ath_hal_debug,
 	  .maxlen	= sizeof(ath_hal_debug),
 	  .proc_handler	= proc_dointvec
 	},
 #endif
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "dma_beacon_response_time",
+	{ .procname	= "dma_beacon_response_time",
 	  .data		= &ath_hal_dma_beacon_response_time,
 	  .maxlen	= sizeof(ath_hal_dma_beacon_response_time),
 	  .mode		= 0644,
 	  .proc_handler	= proc_dointvec
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "sw_beacon_response_time",
+	{ .procname	= "sw_beacon_response_time",
 	  .mode		= 0644,
 	  .data		= &ath_hal_sw_beacon_response_time,
 	  .maxlen	= sizeof(ath_hal_sw_beacon_response_time),
 	  .proc_handler	= proc_dointvec
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "swba_backoff",
+	{ .procname	= "swba_backoff",
 	  .mode		= 0644,
 	  .data		= &ath_hal_additional_swba_backoff,
 	  .maxlen	= sizeof(ath_hal_additional_swba_backoff),
 	  .proc_handler	= proc_dointvec
 	},
 #ifdef AH_DEBUG_ALQ
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "alq",
+	{ .procname	= "alq",
 	  .mode		= 0644,
 	  .proc_handler	= sysctl_hw_ath_hal_log
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "alq_size",
+	{ .procname	= "alq_size",
 	  .mode		= 0644,
 	  .data		= &ath_hal_alq_qsize,
 	  .maxlen	= sizeof(ath_hal_alq_qsize),
 	  .proc_handler	= proc_dointvec
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "alq_lost",
+	{ .procname	= "alq_lost",
 	  .mode		= 0644,
 	  .data		= &ath_hal_alq_lost,
 	  .maxlen	= sizeof(ath_hal_alq_lost),
@@ -571,22 +564,19 @@ static ctl_table ath_hal_sysctls[] = {
 	{ 0 }
 };
 static ctl_table ath_hal_table[] = {
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "hal",
+	{ .procname	= "hal",
 	  .mode		= 0555,
 	  .child	= ath_hal_sysctls
 	}, { 0 }
 };
 static ctl_table ath_ath_table[] = {
-	{ .ctl_name	= DEV_ATH,
-	  .procname	= "ath",
+	{ .procname	= "ath",
 	  .mode		= 0555,
 	  .child	= ath_hal_table
 	}, { 0 }
 };
 static ctl_table ath_root_table[] = {
-	{ .ctl_name	= CTL_DEV,
-	  .procname	= "dev",
+	{ .procname	= "dev",
 	  .mode		= 0555,
 	  .child	= ath_ath_table
 	}, { 0 }
--- a/ath_rate/amrr/amrr.c
+++ b/ath_rate/amrr/amrr.c
@@ -482,8 +482,7 @@ static int min_threshold = 1;
  */
 
 static ctl_table ath_rate_static_sysctls[] = {
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "interval",
+	{ .procname	= "interval",
 	  .mode		= 0644,
 	  .data		= &ath_rateinterval,
 	  .maxlen	= sizeof(ath_rateinterval),
@@ -491,8 +490,7 @@ static ctl_table ath_rate_static_sysctls
 	  .extra2	= &maxint,
 	  .proc_handler	= proc_dointvec_minmax
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "max_success_threshold",
+	{ .procname	= "max_success_threshold",
 	  .mode		= 0644,
 	  .data		= &ath_rate_max_success_threshold,
 	  .maxlen	= sizeof(ath_rate_max_success_threshold),
@@ -500,8 +498,7 @@ static ctl_table ath_rate_static_sysctls
 	  .extra2	= &maxint,
 	  .proc_handler	= proc_dointvec_minmax
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "min_success_threshold",
+	{ .procname	= "min_success_threshold",
 	  .mode		= 0644,
 	  .data		= &ath_rate_min_success_threshold,
 	  .maxlen	= sizeof(ath_rate_min_success_threshold),
@@ -512,22 +509,19 @@ static ctl_table ath_rate_static_sysctls
 	{ 0 }
 };
 static ctl_table ath_rate_table[] = {
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "rate",
+	{ .procname	= "rate",
 	  .mode		= 0555,
 	  .child	= ath_rate_static_sysctls
 	}, { 0 }
 };
 static ctl_table ath_ath_table[] = {
-	{ .ctl_name	= DEV_ATH,
-	  .procname	= "ath",
+	{ .procname	= "ath",
 	  .mode		= 0555,
 	  .child	= ath_rate_table
 	}, { 0 }
 };
 static ctl_table ath_root_table[] = {
-	{ .ctl_name	= CTL_DEV,
-	  .procname	= "dev",
+	{ .procname	= "dev",
 	  .mode		= 0555,
 	  .child	= ath_ath_table
 	}, { 0 }
--- a/ath_rate/onoe/onoe.c
+++ b/ath_rate/onoe/onoe.c
@@ -427,8 +427,7 @@ static int maxint = 0x7fffffff;		/* 32-b
  * Static (i.e. global) sysctls.
  */
 static ctl_table ath_rate_static_sysctls[] = {
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "interval",
+	{ .procname	= "interval",
 	  .mode		= 0644,
 	  .data		= &ath_rateinterval,
 	  .maxlen	= sizeof(ath_rateinterval),
@@ -436,8 +435,7 @@ static ctl_table ath_rate_static_sysctls
 	  .extra2	= &maxint,
 	  .proc_handler	= proc_dointvec_minmax
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "raise",
+	{ .procname	= "raise",
 	  .mode		= 0644,
 	  .data		= &ath_rate_raise,
 	  .maxlen	= sizeof(ath_rate_raise),
@@ -445,8 +443,7 @@ static ctl_table ath_rate_static_sysctls
 	  .extra2	= &maxpercent,
 	  .proc_handler	= proc_dointvec_minmax
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "raise_threshold",
+	{ .procname	= "raise_threshold",
 	  .mode		= 0644,
 	  .data		= &ath_rate_raise_threshold,
 	  .maxlen	= sizeof(ath_rate_raise_threshold),
@@ -455,22 +452,19 @@ static ctl_table ath_rate_static_sysctls
 	{ 0 }
 };
 static ctl_table ath_rate_table[] = {
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "rate",
+	{ .procname	= "rate",
 	  .mode		= 0555,
 	  .child	= ath_rate_static_sysctls
 	}, { 0 }
 };
 static ctl_table ath_ath_table[] = {
-	{ .ctl_name	= DEV_ATH,
-	  .procname	= "ath",
+	{ .procname	= "ath",
 	  .mode		= 0555,
 	  .child	= ath_rate_table
 	}, { 0 }
 };
 static ctl_table ath_root_table[] = {
-	{ .ctl_name	= CTL_DEV,
-	  .procname	= "dev",
+	{ .procname	= "dev",
 	  .mode		= 0555,
 	  .child	= ath_ath_table
 	}, { 0 }
